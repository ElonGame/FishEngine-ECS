cmake_minimum_required(VERSION 3.9)
project(FishEngine-ECS)
set(CMAKE_CXX_STANDARD 17)

# Output
set(CMAKE_BINARY_DIR ${CMAKE_CURRENT_LIST_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

# glfw
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(./ThirdParty/glfw/)
include_directories(./ThirdParty/glfw/include)
SET_TARGET_PROPERTIES(glfw PROPERTIES FOLDER "ThirdParty")


# # nVidia PhysX
# if (MSVC)
#     SET( PhysX_ROOT_DIR "D:\\library\\PhysX-3.4-master\\PhysX_3.4" )
# else()
#     SET( PhysX_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/Physx-3.4/PhysX_3.4 )
# endif()
# include_directories( ${PhysX_ROOT_DIR}/Include )
# include_directories( ${PhysX_ROOT_DIR}/../PxShared/include )
# include_directories( ${PhysX_ROOT_DIR}/Snippets )
# if (NOT EXISTS ${PhysX_ROOT_DIR}/Include/PxPhysicsAPI.h)
#     message(FATAL_ERROR "Physx not found")
# endif()
# # if (MSVC)
# #     FILE(GLOB PhysXSDK_LIBRARIES_DEBUG ${PhysX_ROOT_DIR}/Lib/vc15win64/*DEBUG*lib ${PhysX_ROOT_DIR}/../PxShared/lib/vc15win64/*DEBUG*lib)
# #     FILE(GLOB PhysXSDK_LIBRARIES_CHECKED ${PhysX_ROOT_DIR}/Lib/vc15win64/*CHECKED*lib ${PhysX_ROOT_DIR}/../PxShared/lib/vc15win64/*CHECKED*lib)
# #     SET(PhysXSDK_LIBRARIES optimized ${PhysXSDK_LIBRARIES_CHECKED} debug ${PhysXSDK_LIBRARIES_DEBUG})
# # else()
# #     FILE(GLOB PhysXSDK_LIBRARIES ${PhysX_ROOT_DIR}/Lib/osx64/*.a ${PhysX_ROOT_DIR}/../PxShared/lib/osx64/*.a)
# # endif()
# if (MSVC)
#     # PhysXSDK
#     # set(PhysX_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR}/ThirdParty/PhysXSDK)
#     set(PhysXSDK_LIBRARIES_DIR "D:\\program\\FishEngine-Experiment\\ThirdParty\\PhysX-3.4\\PhysX_3.4\\Lib\\vc15win64")
#     set(PhysXSDK_LIBRARIES "")
#     foreach(x PhysX3 PhysX3Common PxPvdSDK PxFoundation)
#         set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG_x64.lib)
#         set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED_x64.lib)
#         IF(NOT EXISTS ${lib1})
#             message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
#         endif ()
#         IF(NOT EXISTS ${lib2})
#             message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
#         endif ()
#         list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
#     endforeach()
#     foreach(x PhysX3Extensions)
#         set(lib1 ${PhysXSDK_LIBRARIES_DIR}/${x}DEBUG.lib)
#         set(lib2 ${PhysXSDK_LIBRARIES_DIR}/${x}CHECKED.lib)
#         IF(NOT EXISTS ${lib1})
#             message(FATAL_ERROR "physx root directory does not exist: ${lib1}")
#         endif ()
#         IF(NOT EXISTS ${lib2})
#             message(FATAL_ERROR "physx root directory does not exist: ${lib2}")
#         endif ()
#         list (APPEND PhysXSDK_LIBRARIES debug ${lib1} optimized ${lib2})
#     endforeach()
# else()
#     # FILE(GLOB PhysXSDK_LIBRARIES ./ThirdParty/Physx-3.4/Lib/osx64/*.a)
#     FILE(GLOB PhysXSDK_LIBRARIES ${PhysX_ROOT_DIR}/Lib/osx64/*.a ${PhysX_ROOT_DIR}/../PxShared/lib/osx64/*.a)
# endif()
# #message("PhysXSDK_LIBRARIES" ${PhysXSDK_LIBRARIES})


# set(NANOVG_DIR "${CMAKE_CURRENT_LIST_DIR}/ThirdParty/nanovg/nanovg")
# include_directories(${NANOVG_DIR}/../)
# file(GLOB_RECURSE NANOVG_HEADERS ${NANOVG_DIR}/*.h)
# add_library(nanovg ${NANOVG_DIR}/nanovg.c ${NANOVG_HEADERS})
# set_target_properties(nanovg PROPERTIES FOLDER "ThirdParty")


# include_directories(./ThirdParty/yaml-cpp/include)
# set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "" FORCE)
# set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
# #set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
# ADD_SUBDIRECTORY(./ThirdParty/yaml-cpp)
# SET_TARGET_PROPERTIES(yaml-cpp PROPERTIES FOLDER "ThirdParty/yaml-cpp")
# SET_TARGET_PROPERTIES(format PROPERTIES FOLDER "ThirdParty/yaml-cpp")


macro(AutoGroup root_dir)
	foreach(group ${ARGN})
		file(GLOB_RECURSE files ${root_dir}/${group}/*.hpp ${root_dir}/${group}/*.inl ${root_dir}/${group}/*.cpp)
		source_group(${group} FILES ${files})
	endforeach(group)
endmacro()

# include_directories(${CMAKE_CURRENT_LIST_DIR}/Include/)


# # python3
# find_package(PythonInterp 3 REQUIRED)
# find_package(PythonLibs 3 REQUIRED)
# INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})


# if (APPLE)
# 	find_package(Boost REQUIRED COMPONENTS filesystem)
# 	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

# 	find_package(folly REQUIRED)
# 	include_directories(${FOLLY_INCLUDE_DIR})
# endif()

# add_subdirectory(./ThirdParty/pybind11)
# include_directories(./ThirdParty/pybind11/include)


# # glm
# include_directories(./ThirdParty/glm)
# #FishGUI
# SET(FishGUI_DIR ../FishGUI)
# SET(FishGUI_INCLUDE_DIR ${FishGUI_DIR}/include)
# SET(FishGUI_SRC_DIR ${FishGUI_DIR}/src)
# # aux_source_directory(${FishGUI_SRC_DIR} SRCS)
# file(GLOB_RECURSE SRCS ${FishGUI_SRC_DIR}/*.cpp)
# FILE(GLOB_RECURSE HEADERS ${FishGUI_DIR}/include/FishGUI/*.hpp)
# include_directories( ${FishGUI_INCLUDE_DIR} )
# # set(FishGUI_EXTENSION_DIR ${FishGUI_DIR}/examples/common)
# # include_directories(${FishGUI_EXTENSION_DIR})
# # FILE(GLOB_RECURSE EXTENSIONS ${FishGUI_EXTENSION_DIR}/*.hpp ${FishGUI_EXTENSION_DIR}/*.cpp)
# # source_group("extensions" FILES ${EXTENSIONS})
# add_library(FishGUI ${SRCS} ${HEADERS})


file(GLOB_RECURSE HEADERS ${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine/*.hpp ${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine/*.inl)
file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine/*.cpp)
add_library(FishEngine ${HEADERS} ${SRCS})

# file(GLOB_RECURSE HEADERS ${CMAKE_CURRENT_LIST_DIR}/Include/FishEditor/*.hpp ${CMAKE_CURRENT_LIST_DIR}/Include/FishEditor/*.inl ${CMAKE_CURRENT_LIST_DIR}/Source/FishEditor/*.hpp)
# file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_LIST_DIR}/Source/FishEditor/*.cpp)
# add_library(FishEditor ${HEADERS} ${SRCS})


# file(GLOB_RECURSE SRCS ./Source/Editor/*.cpp ./Source/Editor/*.hpp)
# add_executable(Editor ${SRCS})
# target_link_libraries(Editor FishEngine)
# target_link_libraries(Editor FishEditor)
# target_link_libraries(Editor FishGUI)
# target_link_libraries(Editor nanovg)
# target_link_libraries(Editor glfw)
# target_link_libraries(Editor ${FBXSDK_LIB})
# target_link_libraries(Editor pybind11::embed)
# target_link_libraries(Editor ${FOLLY_LIBRARIES})
# target_link_libraries(Editor ${Boost_LIBRARIES})
# target_link_libraries(Editor ${PhysXSDK_LIBRARIES})
# target_link_libraries(Editor yaml-cpp)
# target_link_libraries(Editor ${BGFX_LIB})
# if (MSVC)
# 	target_link_libraries(Editor glew_s)
# else()
# 	set_target_properties(Editor PROPERTIES LINK_FLAGS "-framework OpenGL")

# 	SET( INFO_PLIST ${CMAKE_CURRENT_LIST_DIR}/MacOSXBundleInfo.plist.in)
# 	IF (NOT EXISTS ${INFO_PLIST})
# 		MESSAGE(FATAL_ERROR "${INFO_PLIST} not found!")
# 	ENDIF()
# 	set_target_properties(Editor PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${INFO_PLIST}" )
# endif()

# add_subdirectory(./Test)

AutoGroup(./Include/FishEngine Math Systems Components)
AutoGroup(./Source/FishEngine Math Systems Components)

# AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEngine Util Math Render Internal Component UI System Physics Serialization Animation)
# AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEngine Math Render Component UI System Physics Serialization Animation)
# AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Include/FishEditor Serialization)
# AutoGroup(${CMAKE_CURRENT_LIST_DIR}/Source/FishEditor Serialization)

include_directories("./ThirdParty/tinygltf")
include_directories("./ThirdParty/bgfx/include")
include_directories("./ThirdParty/bimg/include")
include_directories("./ThirdParty/bx/include")
include_directories("./ThirdParty/bgfx/3rdparty")
include_directories("./ThirdParty/bgfx/examples/common")
if (MSVC)
    include_directories("./ThirdParty/bx/include/compat/msvc")
endif()


file(GLOB_RECURSE IMGUI_HEADERS "./ThirdParty/bgfx/3rdparty/dear-imgui/*.h" "./ThirdParty/bgfx/examples/common/imgui/*.h")
file(GLOB_RECURSE IMGUI_SRCS "./ThirdParty/bgfx/3rdparty/dear-imgui/*.cpp" "./ThirdParty/bgfx/examples/common/imgui/*.cpp")
add_library(imgui ${IMGUI_HEADERS} ${IMGUI_SRCS})
SET_TARGET_PROPERTIES(imgui PROPERTIES FOLDER "ThirdParty")


target_link_libraries(FishEngine glfw)
target_link_libraries(FishEngine imgui)
target_compile_definitions(FishEngine PRIVATE _ITERATOR_DEBUG_LEVEL=0)

if (MSVC)
	target_compile_definitions(FishEngine PRIVATE _ITERATOR_DEBUG_LEVEL=0)
	set(BGFX_LIB_DIR "${CMAKE_CURRENT_LIST_DIR}/ThirdParty/bgfx/.build/win64_vs2017/bin")
else()
	set_target_properties(FishEngine PROPERTIES LINK_FLAGS "-framework OpenGL -framework Cocoa -framework metal -framework QuartzCore")
	set(BGFX_LIB_DIR "${CMAKE_CURRENT_LIST_DIR}/ThirdParty/bgfx/.build/osx64_clang/bin")
endif()

set(BGFX_LIBRARIES "")
foreach(x bgfx bx bimg bimg_decode)
    if (MSVC)
        set(lib1 ${BGFX_LIB_DIR}/${x}Debug.lib)
        set(lib2 ${BGFX_LIB_DIR}/${x}Release.lib)
    else()
        set(lib1 ${BGFX_LIB_DIR}/lib${x}Debug.a)
        set(lib2 ${BGFX_LIB_DIR}/lib${x}Release.a)
    endif()
    IF(NOT EXISTS ${lib1})
        message(FATAL_ERROR "bgfx lib not found: ${lib1}")
    endif ()
    IF(NOT EXISTS ${lib2})
        message(FATAL_ERROR "bgfx lib not found: ${lib2}")
    endif ()
    list (APPEND BGFX_LIBRARIES debug ${lib1} optimized ${lib2})
endforeach(x)
target_link_libraries(FishEngine ${BGFX_LIBRARIES})

include_directories("./Include")

add_executable(demo1 "./Examples/demo1.cpp")
target_link_libraries(demo1 FishEngine)

add_executable(demo2 "./Examples/demo2.cpp")
target_link_libraries(demo2 FishEngine)

add_executable(modelViewer "./Examples/model_viewer.cpp")
target_link_libraries(modelViewer FishEngine)

if (MSVC)
	target_compile_definitions(imgui PRIVATE _ITERATOR_DEBUG_LEVEL=0)
    target_compile_definitions(demo1 PRIVATE _ITERATOR_DEBUG_LEVEL=0)
    target_compile_definitions(demo2 PRIVATE _ITERATOR_DEBUG_LEVEL=0)
    target_compile_definitions(modelViewer PRIVATE _ITERATOR_DEBUG_LEVEL=0)
else()
    # set_target_properties(demo1 PROPERTIES LINK_FLAGS "-framework OpenGL -framework Cocoa -framework metal -framework QuartzCore")
    # set_target_properties(demo2 PROPERTIES LINK_FLAGS "-framework OpenGL -framework Cocoa -framework metal -framework QuartzCore")
endif()
